（有bug，还好没看出来）

四则运算

输入字符串 `(1+2)*3`
输出 9

```
#include <iostream>
#include <vector>
#include <stack>

int getANumber(const std::string &s, int &i)
{
    int a = 0;
    while (i < s.length() && isdigit(s[i]))
    {
        a += s[i] - '0';
        i++;
    }
    return a;
}

int calculation(std::string s)
{
    int ans = 0, a;
    std::stack<int> st;
    int pn = 0;
    for (int i = 0; i < s.length();)
    {
        if (s[i] == '(' || isdigit(s[i]))
        {
            if (s[i] == '(')
                i++;
            a = getANumber(s, i);
            st.push(a);
            pn += 1;
        }
        else if (s[i] == '+' || s[i] == '-')
        {
            if (s[i] == '-')
                a = -1;
            else
                a = 1;
            a = a * getANumber(s, ++i);
            int t = st.top();
            st.push(a);
            pn += 1;
        }
        else if (s[i] == '*')
        {
            a = getANumber(s, ++i);
            int t = st.top();
            st.pop();
            st.push(a * t);
        }
        else if (s[i] == '/')
        {
            a = getANumber(s, ++i);
            int t = st.top();
            assert(t != 0);
            st.pop();
            st.push(t / a);
        }
        else // ')'
        {
            i++;
            int t = 0;
            while (pn--)
            {
                t += st.top();
                st.pop();
            }
            st.push(t);
            pn=0;
        }
    }
    while (st.empty() == false)
    {
        ans += st.top();
        st.pop();
    }
    return ans;
}

int main()
{
    std::string s = "1+2*3";
    std::cout << calculation(s) << "\n";

    return 0;
}
```

之前没维护 `pn`，导致 `1+2*3` 输出 9，然后 debug 了下加入了 pn

pn统计了当前括号里有多少项需要相加，等做完乘法除法运算后相加

还有bug就是运算符后面不能有左括号、不支持嵌套括号。。

遇到左括号需要递归处理