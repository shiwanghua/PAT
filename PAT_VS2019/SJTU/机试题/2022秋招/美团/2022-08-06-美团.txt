3个多选20分全错：

1. 哪些是优化算法：牛顿法、拉格朗日法、梯度下降法、共轭梯度法（全选？）

2. 错误的是：

最常用的核函数是高斯核，$ k(u,v)=N(u-v;0,\sigma^2I) $ 

可以认为高斯核在执行一种模板匹配。训练标签y相关的训练样本x变成了类别y的模板。当测试点x'到x的欧几里得距离很小，对应的高斯核相应很大时，表明x'和模板x非常相似。（正确）

核技巧表现好其一是因为能使用保证有效收敛的凸优化学习非线性模型，优化算法可以将决策函数视为不同空间中的线性函数

核技巧表现好其二是因为其实现方法比直接构建 $\phi(x)$ 再算点积高效很多（正确）

3. 正确的是：ac
    非参数估计
            可用于任意分布
            需要预设观测数据符合某数学模型
            不需要假定数学模型
            包括最大似然估计
    

```
1. x个a，y个b，2a1b或者 1a2b拼成一盒，最多拼成多少盒

       小美开的西点屋举办一周年活动，她准备制作一批礼盒作为对消费者的回馈，每个礼盒中都有三枚西点屋的招牌点心。西点屋共有A和B两种招牌点心，为了让消费者都能品尝到两种点心，因此每个礼盒中都要包含至少一枚A点心和一枚B点心。现在小美的西点屋内共有x枚A点心和y枚B点心，请问小美最多可以制作多少个礼盒。



输入描述
    输入第一行包含一个正整数T，表示数据组数。(1<=T<=10000)

    然后有T行，每行包含两个整数x和y，空格隔开，表示有x枚A点心和y枚B点心。(1<=x,y<=10^9)

输出描述
     输出包含T行，每行一个整数，表示最多可以制作的礼盒数量。


样例输入
2
44 85
9 49
样例输出
43
9

#include
using namespace std;

int main(){
  int t=0;cin>>t;
  int x,y;
  while(t--){
    cin>>x>>y;
    if(x>y){
      swap(x,y);
    }
    int c=0;
    if(2*x<=y){
      cout<<x<<"\n";
    }
    else{
      int q=(2*x-y)/3;
      int p=min(x-2*q,(y-q)/2);
      cout<<min(q+p,(x+y)/3)<<"\n";
    }
  }
  return 0;
}

2. 
编程题|20.0分2/4
小美的实验结果
时间限制： 1000MS
内存限制： 65536KB
题目描述：
        小美在做一个实验，这个实验会在纸带上打印出若干个数字，已知该实验所呈现出的正确结果应该是存在某一个分割处k，在k之前打印出的数字都是小于0的，而在k之后的数字应该都是大于0的，那么在k之前如果某一个数据大于等于0，那么我们认为这个数据是异常的，同理，在k之后如果某一个数据小于等于0，那么我们也认为这个数据是异常的。

        现在给出小美打印的纸带，且k是未知的，那么请问在最乐观的情况下至少有多少个实验数据是异常的。(显然如果出现0，无论k为哪个时刻，这个0数据都是异常的)



输入描述
    输入第一行包含一个正整数n，表示小美在纸带上打印的数字数量。(1<=n<=100000)

    输入第二行包含n个整数 ，即小美在纸带上打印的数字，中间用空格隔开。数字仅会为 -1，0，1中的一个。

输出描述
输出仅包含一个整数，表示至少有多少个实验数据是异常的。


样例输入
5
0 -1 1 1 -1
样例输出
2

提示
在最乐观的情况下，k应该在第二个和第三个数字之间，此时第一个和最后一个数据是异常的。

#include
#include
using namespace std;

int main(){
  int t=0;cin>>t;
  vector a(t);
  for(int i=0;i<t;i++)
    cin>>a[i];
  int zeros=0;
  vector pospre(t,0);
  vector negpost(t,0);
  if(a[0]>0) pospre[0]=1;
  if(a[t-1]<0) negpost[t-1]=1;
  if(a[0]==0) zeros=1;
  for(int i=1;i<t;i++){
    pospre[i]=a[i]>0?pospre[i-1]+1:pospre[i-1];
    negpost[t-1-i]=a[t-i-1]<0?negpost[t-i]+1:negpost[t-i];
    if(a[i]==0) zeros++;
  }
  int minI=min(negpost[0],pospre[t-1]);
  for(int i=0;i<t-1;i++){
    minI=min(minI,pospre[i]+negpost[i+1]);
  }
  cout<<minI+zeros;
  return 0;
}

3. 
编程题|20.0分3/4
小美的魔法石共鸣
时间限制： 1000MS
内存限制： 65536KB
题目描述：
        小美有n块魔法石，每块魔法石都有正反两面，每一面上都刻有一个魔法阵，初始状态下，n块魔法石都是正面向上。这n块魔法石的能量刚好可以构建一个大型魔法阵，但是需要至少一半的魔法石向上的一面铭刻的阵法相同才能触发大型魔法阵的效果。

        小美希望翻转最少数量的魔法石，使得这个大型魔法阵被触发，请问她最少需要翻转多少块魔法石。



输入描述
输入第一行包含一个正整数n，表示魔法石的数量。(1<=n<=100000)

输入第二行包含n个正整数，表示n块魔法石正面铭刻的魔法阵种类，由于魔法书上记载的魔法阵数量太多，所以魔法阵编号可能是从1到10^9中的任何一个正整数。

输入第三行包含n个正整数，表示n块魔法石反面铭刻的魔法阵种类，魔法阵编号同样在1到10^9之间。

数字间两两有空格隔开

输出描述
输出仅包含一个整数，如果有解则输出最少翻转的魔法石数量，如果无解则输出-1。


样例输入
5
1 5 7 5 5 
10 5 5 9 10
样例输出
0

#include
#include
#include
using namespace std;

int main(){
  int n;cin>>n;
  vector a(n,0);
  vector b(n,0);
  unordered_map c;
  for(int i=0;i<n;i++){
    cin>>a[i];
    c[a[i]]++;
  }
  for(int i=0;i<n;i++){
    cin>>b[i];
    c[b[i]]++;
  }
  vector z;
  for(auto& [v,cnt]:c){
    if(cnt>=(n+1)/2)
      z.push_back(v);
  }
  if(z.size()==0){
    cout<<"-1";
  }
  else{
    int minr=(n+1)/2;
    for(auto i:z){
      int posn=0;
      for(auto j:a){
        if(j==i)
          posn++;
      }
      if(posn>(n+1)/2)
      {
        cout<<0;
        return 0;
      }
      minr=min(minr,(n+1)/2-posn);
    }
    cout<<minr;
  }
  return 0;
}

4. 

编程题|20.0分4/4
小美的数据拆分
时间限制： 1000MS
内存限制： 65536KB
题目描述：
        小美非常热衷于数据竞赛，数据竞赛是当下非常流行的一种比赛形式，在这种比赛中往往会给出一个训练集和一个测试集，由于测试集是没有标注的，因此大家为了线下评测模型的性能，通常会将训练集拆分成两个部分，即自建的训练集和测试集。

        现在给出某比赛的一个训练集，小美需要按照如下规则将其拆分为训练集和测试集。

        已知该训练集包含n个样本，每个样本有一个样本编号和一个类别编号。假设某一类别的样本共有m个，则将编号最小的m/2(向上取整)个样本作为训练集，将其他样本作为测试集。

 
输入描述
    输入第一行包含两个正整数n和k，分别表示样本数量和类别数量。(1<=n<=10000,1<=k<=100)

    输入第二行包含n个正整数，第i个正整数j表示第i个样本的类别编号是j。


#include
#include
#include
#include
using namespace std;

int main(){
  int n, k, t;cin>>n>>k;
  vector> c(k+1,vector(0));
  for(int i=1;i<=n;i++){
    cin>>t;
    c[t].push_back(i);
  }
  vector train,test;
  for(auto& cl:c){
    for(int i=0;i<(cl.size()+1)/2;i++){
      train.push_back(cl[i]);
    }
    for(int i=(cl.size()+1)/2;i<cl.size();i++){
      test.push_back(cl[i]);
    }      
  }
  sort(train.begin(),train.end());
  sort(test.begin(),test.end());
  for(int i=0;i<train.size()-1;i++)
    cout<<train[i]<<" ";
  cout<<train[train.size()-1]<<"\n";
  for(int i=0;i<test.size()-1;i++)
    cout<<test[i]<<" ";
  cout<<test[test.size()-1];
  return 0;
}
```